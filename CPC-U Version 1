// Dispatcher Training Simulator with training directory screen
import React, { useState, useEffect } from "react";
import "./styles.css";

const audioFiles = {
  1: "/file_example_MP3_1MG.mp3",
  2: "/sample-12s%20Scenario%202%20test.mp3",
  3: "/sample-15s%20Scenario%203%20test.mp3",
};

const scenarios = [
  {
    id: 1,
    title: "",
    driverText: "",
    modelAnswer: `Thanks for the update. I am gonna go ahead and mark this in our system for re-plan and get in touch with planning. Please hold tight and I will reach back out as soon as I get you something else.

â€ƒâ€ƒIn this scenario, you could utilize Lima's ROAR report to see if a trailer has been assigned, check the \"Custom Def's\" tab in customer service for a \"Trailer Loaded\" time, or JDA to see if P&G's system has any loading info.`,
  },
  {
    id: 2,
    title: "",
    driverText: "",
    modelAnswer:
      "Iâ€™m sorry about that. Let me verify the correct address. Can you send me your current location or a nearby landmark while I check with the customer?",
  },
  {
    id: 3,
    title: "",
    driverText: "",
    modelAnswer:
      "Safety first. Please pull over at a safe location and check the connections. If itâ€™s not a quick fix, Iâ€™ll arrange road service.",
  },
];

function exportToCSV(data) {
  const headers = ["Trainee", "Scenario", "Response", "Time Spent (s)"];
  const rows = [];
  for (const [trainee, { responses, durations }] of Object.entries(data)) {
    scenarios.forEach((s) => {
      rows.push([
        trainee,
        s.title,
        responses[s.id] || "",
        durations[s.id] || 0,
      ]);
    });
  }
  const csvContent =
    "data:text/csv;charset=utf-8," +
    [
      headers.join(","),
      ...rows.map((r) => r.map((x) => `"${x}"`).join(",")),
    ].join("\n");
  const encodedUri = encodeURI(csvContent);
  const link = document.createElement("a");
  link.setAttribute("href", encodedUri);
  link.setAttribute("download", "trainee_responses.csv");
  document.body.appendChild(link);
  link.click();
  document.body.removeChild(link);
}

export default function App() {
  const [firstName, setFirstName] = useState("");
  const [lastName, setLastName] = useState("");
  const [isNamed, setIsNamed] = useState(false);
  const [showDirectory, setShowDirectory] = useState(false);
  const [showInstructions, setShowInstructions] = useState(false);
  const [current, setCurrent] = useState(0);
  const [response, setResponse] = useState("");
  const [submitted, setSubmitted] = useState(false);
  const [completed, setCompleted] = useState(false);
  const [responses, setResponses] = useState({});
  const [durations, setDurations] = useState({});
  const [startTime, setStartTime] = useState(Date.now());
  const [allTrainees, setAllTrainees] = useState(() => {
    const saved = localStorage.getItem("allTraineeData");
    return saved ? JSON.parse(saved) : {};
  });
  const [showReviewPrompt, setShowReviewPrompt] = useState(false);
  const [isAuthorized, setIsAuthorized] = useState(false);
  const [passwordInput, setPasswordInput] = useState("");
  const [expandedTrainee, setExpandedTrainee] = useState(null);
  const [hasExported, setHasExported] = useState(false);

  const scenario = scenarios[current];

  useEffect(() => {
    setStartTime(Date.now());
    setResponse("");
    setSubmitted(false);
  }, [current]);

  useEffect(() => {
    if (completed && !hasExported) {
      exportToCSV(allTrainees);
      setHasExported(true);
    }
  }, [completed, hasExported, allTrainees]);

  const handleSubmit = () => {
    if (!response.trim()) {
      alert("Please enter a response before submitting.");
      return;
    }
    const endTime = Date.now();
    const timeSpent = Math.round((endTime - startTime) / 1000);
    const traineeName = `${firstName} ${lastName}`;
    const updatedResponses = {
      ...(allTrainees[traineeName]?.responses || {}),
      [scenario.id]: response,
    };
    const updatedDurations = {
      ...(allTrainees[traineeName]?.durations || {}),
      [scenario.id]: timeSpent,
    };
    const updatedAllTrainees = {
      ...allTrainees,
      [traineeName]: {
        responses: updatedResponses,
        durations: updatedDurations,
      },
    };
    setAllTrainees(updatedAllTrainees);
    setResponses(updatedResponses);
    setDurations(updatedDurations);
    localStorage.setItem("allTraineeData", JSON.stringify(updatedAllTrainees));
    setSubmitted(true);
  };

  const handleNext = () => {
    if (current + 1 >= scenarios.length) {
      setCompleted(true);
    } else {
      setCurrent(current + 1);
    }
  };

  const handleRestart = () => {
    setIsNamed(false);
    setFirstName("");
    setLastName("");
    setShowDirectory(false);
    setShowInstructions(false);
    setCurrent(0);
    setCompleted(false);
    setResponses({});
    setDurations({});
    setSubmitted(false);
    setShowReviewPrompt(false);
    setIsAuthorized(false);
    setPasswordInput("");
    setHasExported(false);
  };

  const handleReturnHome = () => {
    const confirmReset = window.confirm("Returning home will reset progress. Are you sure?");
    if (confirmReset) {
      setShowInstructions(false);
      setCurrent(0);
      setCompleted(false);
      setResponses({});
      setDurations({});
      setSubmitted(false);
      setShowDirectory(true);
    }
  };

  if (!isNamed && !showDirectory && !showReviewPrompt) {
    return (
      <div className="container">
        <div className="card">
          <h2>Enter Your Full Name to Begin</h2>
          <input
            type="text"
            value={firstName}
            onChange={(e) => setFirstName(e.target.value)}
            placeholder="First Name"
          />
          <input
            type="text"
            value={lastName}
            onChange={(e) => setLastName(e.target.value)}
            placeholder="Last Name"
          />
          <button
            onClick={() => {
              if (firstName.trim() && lastName.trim()) {
                setShowDirectory(true);
              }
            }}
          >
            Continue
          </button>
        </div>
      </div>
    );
  }

  if (showDirectory) {
    return (
      <div className="container">
        <div className="card">
          <h2>Select a Training Module</h2>
          <button
            style={{ marginBottom: "10px" }}
            onClick={() => {
              setShowInstructions(true);
              setIsNamed(true);
              setShowDirectory(false);
            }}
          >
            Sample Call Test
          </button>
          <button onClick={() => alert('Question 1')}>
            Which Tools Test
          </button>
        </div>
      </div>
    );
  }

  if (showInstructions) {
    return (
      <div className="container">
        <div className="card">
          <h2>Instructions</h2>
          <p>
            This exercise will put you through several mock phone calls from
            drivers. Please answer to the best of your ability and reference
            specific tools you may be able to use to assist the driver.
          </p>
          <button
            onClick={() => {
              setIsNamed(true);
              setShowInstructions(false);
            }}
          >
            Start Training
          </button>
        </div>
      </div>
    );
  }

  if (completed) {
    return (
      <div className="container">
        <div className="card">
          <h2>ðŸŽ‰ Congratulations!</h2>
          <p>You have completed the Sample Call Training exercise.</p>
          <button onClick={handleReturnHome}>Restart</button>
        </div>
      </div>
    );
  }

  return (
    <div className="container">
      <div style={{ position: 'absolute', bottom: 20, right: 20 }}>
        <button onClick={handleReturnHome}>Return Home</button>
      </div>
      <div className="card">
        <h2>Scenario {scenario.id}</h2>
        <audio
          key={audioFiles[scenario.id]}
          controls
          style={{ display: "block", marginBottom: "10px" }}
        >
          <source src={audioFiles[scenario.id]} type="audio/mpeg" />
          Your browser does not support the audio element.
        </audio>
        <textarea
          value={response}
          onChange={(e) => setResponse(e.target.value)}
          placeholder="Type your response here..."
        />
        {!submitted ? (
          <button onClick={handleSubmit}>Submit Response</button>
        ) : (
          <>
            <div className="model-answer">
              <strong>Model Answer:</strong>
              <p>{scenario.modelAnswer}</p>
            </div>
            <button onClick={handleNext}>Next Scenario</button>
          </>
        )}
      </div>
    </div>
  );
}
